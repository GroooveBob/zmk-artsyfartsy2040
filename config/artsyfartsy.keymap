/*
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


// LAYERS
// ====================================================
#define BASE    0
#define NUMBERS 1
#define HFREQ 	2
#define LFREQ 	3
#define CUSTOM 	4
#define BLE		5

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };
// Sticky Layer Behavior - release sticky behavior after x ms
&sk { release-after-ms = <1800>; };

// ARTSEY DEFINITIONS (use in conjunction with ARTSEY COMBOS)
// ====================================================
// ZMK forces you to define combos in terms of HW key positions
/*
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
// {Key}{Top,Bottom}{Index,Middle,Ring,Pinky}

// ARTS Row Top
#define KTI 3 // Index
#define KTM 2 // Middle
#define KTR 1 // Ring
#define KTP 0 // Pinky
 
// EYIO Row Bottom
#define KBI 7 // Index
#define KBM 6 // Middle
#define KBR 5 // Ring
#define KBP 4 // Pinky


// BEHAVIOR
// ====================================================

/{
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	};


// COMBOS
// ====================================================
/*
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
// ARTSEY COMBOS
// name of the combo, output of the combo, input for the combo, applied on which layers
	#define COMBO(NAME, BINDINGS, KEYPOS, LAYER) \
	combo_##NAME { \
		timeout-ms = <50>; \
		bindings = <BINDINGS>; \
		key-positions = <KEYPOS>; \
		layers = <LAYER>; \
	};

   combos {
        compatible = "zmk,combos";
		/***************
		* 2 key combos
		****************/
		COMBO(1,&kp ENTER,KTI KBI,0 1 2 3 4 5)
		COMBO(2,&sk LCTRL,KBI KTP, 0 1 2 3 4 5)
		COMBO(3,&sk LGUI,KBM KTP, 0 1 2 3 4 5)
		COMBO(4,&sk RALT,KBR KTP, 0 1 2 3 4 5)
		COMBO(5,&kp BACKSPACE,KBI KTM, 0 1 2 3 4 5)
		COMBO(6,&kp DELETE,KBR KTM, 0 1 2 3 4 5)
		COMBO(7,&kt LSHFT,KBM KTM, 0 1 2 3 4 5)

		COMBO(8,&kp B,KBI KBP, 0 1 2 3 4 5)
		COMBO(9,&kp C,KBI KBM, 0 1 2 3 4 5)
		COMBO(10,&kp N,KBP KBR, 0 1 2 3 4 5)
		COMBO(11,&kp F,KTM KTI, 0 1 2 3 4 5)
		COMBO(12,&kp G,KTR KTM, 0 1 2 3 4 5)
		COMBO(13,&kp U,KBR KBM, 0 1 2 3 4 5)
		COMBO(14,&kp H,KBI KBR, 0 1 2 3 4 5)
		COMBO(15,&kp V,KTP KTM, 0 1 2 3 4 5)
		COMBO(16,&kp J,KTP KTR, 0 1 2 3 4 5)
		COMBO(17,&kp W,KTP KTI, 0 1 2 3 4 5)
		COMBO(18,&kp K,KBP KBM, 0 1 2 3 4 5)

		COMBO(19,&kp PERIOD,KBM KTI, 0 1 2 3 4 5)
		COMBO(20,&kp COMMA,KBR KTI, 0 1 2 3 4 5)
		COMBO(21,&kp SLASH,KBP KTI, 0 1 2 3 4 5)
		COMBO(22,&kp EXCL,KTR KBR, 0 1 2 3 4 5)

		COMBO(23,&kp N7,KTM KTI, 1)
		COMBO(24,&kp N8,KTR KTM, 1)
		COMBO(25,&kp N9,KBM KBI, 1)
		COMBO(26,&kp N0,KBR KBM, 1)

		/***************
		* 3 key combos
		****************/


   };

// KEYMAP
// ====================================================
	keymap {
		compatible = "zmk,keymap";
// -----------------------------------------------------------------------------		
/*  0 = Base
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
		// LAYER: BASE 0
		default_layer {
			label = "Base";
			bindings = <
			&kp S       &kp T       &kp R       &kp A 
			&kp O       &kp I       &kp SPACE   &kp E 
			>;
		};

// -----------------------------------------------------------------------------
/*  1 = Numbers
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
		// LAYER: NUMBERS 1
		numbers_layer {
			label = "Numbers";
			bindings = <
			&none       &kp 3       &kp 2       &kp 1 
			&none       &kp 6       &kp 5       &kp 4 
			>;
		};

// -----------------------------------------------------------------------------
/*  2 = High Frequency
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
		// LAYER: HFREQ 2
		hfreq_layer {
			label = "HFreq";
			bindings = <
			&none       &none       &none       &none 
			&none       &none       &none       &none
			>;
		};

// -----------------------------------------------------------------------------
/*  3 = Low Frequency
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
		// LAYER: LFREQ 3
		lfreq_layer {
			label = "LFreq";
			bindings = <
			&none       &none       &none       &none 
			&none       &none       &none       &none
			>;
		};

// -----------------------------------------------------------------------------

/*  4 = Custom
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
		// LAYER: CUSTOM 4
		custom_layer {
			label = "Custom";
			bindings = <
			&none       &none       &none       &none 
			&none       &none       &none       &none
			>;
		};

// -----------------------------------------------------------------------------
/*  5 = Bluetooth
	.-----------------------.
	|  0  |  1  |  2  |  3  |
	|  4  |  5  |  6  |  7  |  
	'-----------------------' 
*/
		// LAYER: BLE 5
		ble_layer {
			label = "Bluetooth";
			bindings = <
			&none       &none       &none       &none 
			&none       &none       &none       &none
			>;
		};

// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
    };
};